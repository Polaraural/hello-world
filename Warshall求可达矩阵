#include <stdlib.h>
#include <unistd.h>
#include <iostream>
#include <cstring>
#include <cstdio>

using namespace std;
#define TRUE 0

int get_matrix(int **a, int N)
{
    int i = 0,j = 0;
    for (i = 0;i < N;i++) {
        for (j = 0;j < N;j++) {
            cin>>a[i][j];
            if (a[i][j] != 0 && a[i][j] != 1) {
                cout<<"0或1的矩阵"<<endl;
                exit(2);
            }
        }
    }
    return TRUE;
}

int output_matrix(int **a, int N)
{
    cout<<"可达性矩阵："<<endl;
    int i = 0,j = 0;
    for (i = 0;i < N;i++) {
        for (j = 0;j < N;j++) {
            cout<<a[i][j]<<" ";
        }
        cout<<endl;
    }
    return TRUE;
}

int warshall(int **a, int N)
{
    int col = 0;
    int line = 0;
    int temp = 0;

    for (col = 0;col < N;col++) {
        for (line = 0;line < N;line++) {
            if (a[line][col] != 0) {
                for (temp = 0;temp < N;temp++) {
                    a[line][temp] = a[line][temp] | a[col][temp];
                }
            }
        }
    }
    return TRUE;
}

int main(void)
{
    //cout<<"本程序功能：用Warshall算法求图的可达性矩阵。"<<endl<<endl;
    puts("本程序功能：用Warshall算法求图的可达性矩阵。"); cout<<endl;
    //cout<<"输入邻接矩阵的阶数：";
    puts("输入邻接矩阵的阶数：");
    int N;
    cin>>N;
    int **a;
    a = new int*[N];
    for (int i=0;i<N;i++)
    {
        a[i] = new int[N];
    }
    //cout<<"请输入一个"<<N<<" * "<<N<<"的矩阵"<<endl;
    puts("请输入一个");cout<<N<<" * "<<endl;

    if (get_matrix(a ,N)) {
        //cout<<"得到错误的矩阵！"<<endl;
        puts("得到错误的矩阵！");
        exit(1);
    }
    warshall(a ,N);
    output_matrix(a ,N);
    for(int i=0;i<N;i++)
    {
        delete [] a[i];
    }
    delete []a;
    return system("pause");
}

/*
离散实验 并查集
判断图的连通性·
 */
#include <bits/stdc++.h>
using namespace std;  
/*
Not a correct version.
 */
#define N 305    
int main()    
{    
    int a[N][N];    
    int i,j,k,n;    
    scanf("%d\n",&n);    
    
    for(i=0;i<n;i++)    
      for(j=0;j<n;j++)    
        scanf("%d",&a[i][j]);    
    
    for(i=0;i<n;i++)    
      for(k=0;k<n;k++)    
        for(j=0;j<n;j++){    
            if((a[i][k]!=0)&&(a[k][j]!=0))    
                a[i][j]=1;}    
    
    for(i=0;i<n;i++)    
      for(j=0;j<n;j++)    
      {    
        if((a[i][j]==0)&&(a[j][i]==0))
        {    
           printf("3\n");
           return 0;
        }     
        
        if(a[i][j]+a[j][i]==1)
        {     
           printf("2\n");
           return 0;
        } 
            
      }      
           printf("1\n");         
}
/*1代表强连通图
2代表单向连通图
3代表弱连通图
*/   

#include <cstdio>
#include <iostream>
#include <cmath>
#include <algorithm>
using namespace std;
int fac(int n) 
{
    int m = 0;
    if (n == 1) 
    {
        return 1;
    } 
    else 
    {
        return n * fac(n - 1);
    }
}
double C(int n,int m) 
{
    return fac(n) * 1.0 / fac(m) / fac(n - m);
}
int main(int argc, char const *argv[])
{
    int n,m;
    scanf("%d %d",&n,&m);
    //printf("%lf",C(n,m));
    double mi1 = pow(-1,n-1);
    double sum = 0;
    int i;
    for(i=n;i>0;i--)
    {  
       double mi2 = pow(i,m);

       sum = sum + mi1*mi2*C(n,i);
    }
    
    printf("A到B的满射函数有 %lf 个\n",sum);                
    return 0;
}

/*
判断群
 */
#include <iostream>
using  namespace std;
int Y=0;
int S[100][100];
//判断系统为半群
int  banqun(int  n)
{
 int flag=1;
 for(int i=1;i<=n;i++)
  for(int j=1;j<=n;j++)
   for(int k=1;k<=n;k++)
   {
    int x=S[i][j];
    int y=S[j][k];
    if(S[x][k]!=S[i][y])
     flag=0;
   }
   return flag;
}
//判断系统为含幺半群
int yaoqun(int n)
{
 
 for(int i=1;i<=n;i++)
  for(int j=1;j<=n;j++)
   if(S[i][j]==j && S[j][i]==j)
   {
    Y=i;
    return 1;
   }
 return 0;
}
//判断为群
int qun(int n)
{
 int flag1=banqun(n);
 int flag2=yaoqun(n);
 if(flag1&&flag2)
 {
  for(int i=1;i<=n;i++)
   for(int j=1;j<=n;j++)
    if(S[i][j]!=Y || S[j][i]!=Y)
     return 0;
 }
 else return 1;
}
int main()
{
 cout<<"请输入代数系统的阶数：";
 int n;
 cin>>n;
 cout<<"请输入* 运算的运算表：";
 for(int i=1;i<=n;i++)
  for(int j=1;j<=n;j++)
   cin>>S[i][j];
 int flag=qun(n);
 if(flag)cout<<"该代数系统是群"<<endl;
 else cout<<"该代数系统不是群"<<endl;
 return 0;
}
/*
最小生成树
 */
#include <cstdio>  
#include <cstdlib>  
#define MAXN 10000 + 10  
using namespace std;  
  
int par[MAXN], Rank[MAXN];  
typedef struct{  
    int a, b, price;  
}Node;  
Node a[MAXN];  
  
int cmp(const void*a, const void *b){  
    return ((Node*)a)->price - ((Node*)b)->price;  
}  
void Init(int n){  
    for(int i = 0; i < n; i++){  
        Rank[i] = 0;  
        par[i] = i;  
    }  
}  
  
int find(int x){  
    int root = x;  
    while(root != par[root]) root = par[root];  
    while(x != root){  
        int t = par[x];  
        par[x] = root;  
        x = t;  
    }  
    return root;  
}  
  
void unite(int x, int y){  
    x = find(x);  
    y = find(y);  
    if(Rank[x] < Rank[y]){  
        par[x] = y;  
    }  
    else{  
        par[y] = x;  
        if(Rank[x] == Rank[y]) Rank[x]++;  
    }  
}  
//n为边的数量，m为村庄的数量  
int Kruskal(int n, int m){  
    int nEdge = 0, res = 0;  
    //将边按照权值从小到大排序  
    qsort(a, n, sizeof(a[0]), cmp);  
    for(int i = 0; i < n && nEdge != m - 1; i++){  
        //判断当前这条边的两个端点是否属于同一棵树  
        if(find(a[i].a) != find(a[i].b)){  
            unite(a[i].a, a[i].b);  
            res += a[i].price;  
            nEdge++;  
        }  
    }  
    //如果加入边的数量小于m - 1,则表明该无向图不连通,等价于不存在最小生成树  
    if(nEdge < m-1) res = -1;  
    return res;  
}  
int main(){  
    int n, m, ans;  
    while(scanf("%d%d", &n, &m), n){  
        Init(m);  
        for(int i = 0; i < n; i++){  
            scanf("%d%d%d", &a[i].a, &a[i].b, &a[i].price);
            a[i].a--;  
            a[i].b--;  
        }  
        ans = Kruskal(n, m);  
        if(ans == -1) printf("?\n");  
        else printf("%d\n", ans);  
    }  
    return 0;  
}  